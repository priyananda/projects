// __________________________________________________________________________________________________
//    GLGooey Graphical User Interface for OpenGL
//    Copyright (c) 2004 Niel Waldren
//
// This software is provided 'as-is', without any express or implied warranty. In no event will
// the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose, including commercial
// applications, and to alter it and redistribute it freely, subject to the following restrictions:
//
//     1. The origin of this software must not be misrepresented; you must not claim that you
//        wrote the original software. If you use this software in a product, an acknowledgment
//        in the product documentation would be appreciated but is not required.
//
//     2. Altered source versions must be plainly marked as such, and must not be misrepresented
//        as being the original software.
//
//     3. This notice may not be removed or altered from any source distribution.
//
// __________________________________________________________________________________________________
#ifndef __GOOEY_TEXT_RENDERER_H__
#define __GOOEY_TEXT_RENDERER_H__

#include "mmgr/nommgr.h"
#include <cstddef>
#include "mmgr/mmgr.h"

#include "glgooey/core/Alignment.h"


// *************************************************************************************************
//  Forward declarations
namespace Gooey
{
    namespace Core
    {
        class Rectangle;
    }
}
// *************************************************************************************************




// *************************************************************************************************
namespace Gooey
{


// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//! \brief API independent abstract base class for API dependent text renderers.
class TextRenderer
{
    // ----------------------------------------------------------------------------------------------
    //  Xstruction
    // ----------------------------------------------------------------------------------------------
protected:
    //! Construction requires the name of the font to use and the size
    TextRenderer(const std::string& aFontName, size_t aPointSize) :
            fontName_(aFontName), pointSize_(aPointSize) {}

    //! Destructor
    virtual ~TextRenderer() {}



    // ---------------------------------------------------------------------------------------------
    //  Public Interface
    // ---------------------------------------------------------------------------------------------
public:
    //! Returns the name of the font used by this renderer
    std::string fontName() const { return fontName_; }

    //! Returns the size of the font used by this renderer
    size_t pointSize() const { return pointSize_; }

    //! \brief Derived classes must override this and do the actual drawing here
    virtual void render(const std::string& aString, const Core::Rectangle& aRectangle, bool isMultiLine,
        Core::Alignment::Horizontal aHorizontalAlignment, Core::Alignment::Vertical aVerticalAlignment) = 0;

    //! \brief clients must call this method when they are finished with a text renderer
    //! generated by calling create
    virtual void release() = 0;

    virtual float lineHeight() const = 0;

    //! Returns the width of the passed in string if rendered with this renderer
    virtual float width(const std::string& aString) const = 0;

    //! \brief Returns the index of the character at the position determined by the passed in
    //! offset from the beginning of the string
    virtual size_t hitCharacterIndex(const std::string& aString, float anOffset) const = 0;


    // ---------------------------------------------------------------------------------------------
    //  Factory Method
    // ---------------------------------------------------------------------------------------------
public:
    //! \brief Returns a pointer to a text renderer - this function is implemented in the sub-system
    //! that knows the type of renderer to be used
    static TextRenderer* create(const std::string& aFileName, size_t aPointSize);



    // ---------------------------------------------------------------------------------------------
    //  Implementation
    // ----------------------------------------------------------------------------------------------
private:
    std::string fontName_;  //!< The name of the font to use
    size_t      pointSize_; //!< The size of the font in points
};
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<



// *************************************************************************************************
} // namespace Gooey



#endif
