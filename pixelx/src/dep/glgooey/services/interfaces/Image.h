// __________________________________________________________________________________________________
//    GLGooey Graphical User Interface for OpenGL
//    Copyright (c) 2004 Niel Waldren
//
// This software is provided 'as-is', without any express or implied warranty. In no event will
// the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose, including commercial
// applications, and to alter it and redistribute it freely, subject to the following restrictions:
//
//     1. The origin of this software must not be misrepresented; you must not claim that you
//        wrote the original software. If you use this software in a product, an acknowledgment
//        in the product documentation would be appreciated but is not required.
//
//     2. Altered source versions must be plainly marked as such, and must not be misrepresented
//        as being the original software.
//
//     3. This notice may not be removed or altered from any source distribution.
//
// __________________________________________________________________________________________________
#ifndef __GOOEY_IMAGE_H__
#define __GOOEY_IMAGE_H__



// *************************************************************************************************
//  Forward declarations
namespace Gooey
{
    namespace Core
    {
        class Size;
    }
}
// *************************************************************************************************




// *************************************************************************************************
namespace Gooey
{

typedef void (UnregisterImageFunction)(size_t aHandle);


// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//! \brief Abstract base class for bitmap images.
//!
//! GLGooey currently supports RGB and RGBA images. That means that only values of 24 and 32 are
//! valid for the number of bits per pixel.
class Image
{
    // ----------------------------------------------------------------------------------------------
    //  Xstruction
    // ----------------------------------------------------------------------------------------------
protected:
    //! Construction requires the name
    Image(const std::string& aFileName) : fileName_(aFileName), handle_(0) {}

    //! Destructor
    virtual ~Image()
    {
        if(handle() != 0) (*unregisterImage_)(handle());
    }



    // ---------------------------------------------------------------------------------------------
    //  Public Interface
    // ---------------------------------------------------------------------------------------------
public:
    //! Returns the name of the file from which the image was loaded
    std::string fileName() const { return fileName_; }

    //! Returns the size of the image
    virtual Core::Size size() const = 0;

    //! Returns the number of bits per pixel in the image
    virtual size_t numberOfBitsPerPixel() const = 0;

    //! Returns a const pointer to the raw image data
    virtual const unsigned char* data() const = 0;

    //! Returns a non-const pointer to the raw image data
    virtual unsigned char* data() = 0;

    //! \brief clients must call this method when they are finished with an image
    //! generated by calling create
    virtual void release() = 0;

    //! Returns the handle that the renderer uses to address this image
    size_t handle() const { return handle_; }

    //! Sets the handle that the renderer uses to address this image
    //! \note Generally, the renderer will set this when the image is registered. There should
    //! be no need to set it manually
    const Image& setHandle(size_t aHandle) const { handle_ = aHandle; return *this; }


    // ---------------------------------------------------------------------------------------------
    //  Factory Method
    // ---------------------------------------------------------------------------------------------
public:
    //! \brief Returns a pointer to an image - this function is implemented in the sub-system
    //! that knows the type of image to be used
    static Image* create(const std::string& aFileName);



    // ---------------------------------------------------------------------------------------------
    //  Implementation
    // ----------------------------------------------------------------------------------------------
private:
    std::string fileName_;  //!< The name of the font to use
    mutable size_t handle_; //!< The handle which the renderer uses to address this image

    static UnregisterImageFunction* unregisterImage_;
};
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<



// *************************************************************************************************
} // namespace Gooey




#endif
